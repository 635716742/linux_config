"==========================================
" Author:  wklken
" Version: 3
" Email: wklken@yeah.net
" BlogPost:
" ReadMe:
" Last_modify: 2012-12-16
" Sections:
"     ->General
"     ->Vim User Interface
"     ->Colors and Fonts
"     ->Files and Backups
"     ->Text, tab and indent related
"     ->Visual mode related
"     ->Status line
"     ->Editing mapping
"     ->Plugins
"     ->Plugin configs
"     ->Others
"参考:http://amix.dk/vim/vimrc.html
"==========================================
"
"==========================================
"General
"==========================================

" history存储长度。
set history=2000       


"检测文件类型
filetype on
"针对不同的文件类型采用不同的缩进格式  
filetype indent on               
"允许插件  
filetype plugin on
"启动自动补全
filetype plugin indent on

"非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible      
set autoread          " 文件修改之后自动载入。
set shortmess=atI       " 启动的时候不显示那个援助索马里儿童的提示

set title

" 取消备份。
" Turn backup off, since most stuff is in SVN, git et.c anyway...
"set nobackup
set nowb
set noswapfile

"设置 退出vim后，内容显示在终端屏幕
"好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=

" 备份,到另一个位置. 防止误删吧
set backup
set backupext=.bak
set backupdir=~/bak/vimbk/
"set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

"- 则点击光标不会换,用于复制
set mouse-=a           " 鼠标暂不启用
set selection=exclusive  
set selectmode=mouse,key

" No annoying sound on errors
" 去掉输入错误的提示声音
set noerrorbells
set novisualbell
set t_vb=
set tm=500


"==========================================
" show and format
"==========================================
"显示行号：
set number
set nowrap                    " 取消换行。


"括号配对情况
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

"设置文内智能搜索提示
" 高亮search命中的文本。
set hlsearch          
" 搜索时忽略大小写
set ignorecase
" 随着键入即时搜索
set incsearch
" 有一个或以上大写字母时仍大小写敏感
set smartcase

" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
set foldmethod=syntax
set foldlevel=99
" 在左侧显示折叠的层次
"set foldcolumn=4

set tabstop=4                " 设置Tab键的宽度        [等同的空格个数]
set shiftwidth=4

set expandtab                " 将Tab自动转化成空格    [需要输入真正的Tab键时，使用 Ctrl+V + Tab]
" 按退格键时可以一次删掉 4 个空格
set softtabstop=4

set ai "Auto indent
set si "Smart indent

"==========================================
" status
"==========================================
"显示当前的行号列号：
set ruler
""在状态栏显示正在输入的命令
set showcmd
" Show current mode
set showmode  

" Set 7 lines to the cursor - when moving vertically using j/k 上下滚动,始终在中间
set so=7

set cursorline              " 突出显示当前行
"set nocursorcolumn
"set winwidth=79

" 命令行（在状态行下）的高度，默认为1，这里是2
"set cmdheight=2
"set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)
"set statusline=%F%m%r%h%w\[POS=%l,%v][%p%%]\%{strftime(\"%d/%m/%y\ -\ %H:%M\")}
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" Always show the status line
set laststatus=2


"==========================================
"colors and fonts
"==========================================
"开启语法高亮
syntax enable
syntax on

"配色方案 三种,选一个
"set t_Co=256
set background=dark

"colorscheme darkblue          " 深蓝色配色方案。

"colorscheme desert " 经典配色方案。

"同sublime text2
colorscheme molokai


" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif
"set guifont=Monaco:h20          " 字体 && 字号  

"==========================================
" file encode
"==========================================
" 设置新文件的编码为 UTF-8
set encoding=utf-8                                  
set fileencodings=ucs-bom,utf-8,gb2312,big5,latin1
set helplang=cn
"set enc=2byte-gb18030

" 自动判断编码时，依次尝试以下编码：
" gb18030 最好在 UTF-8 前面，否则其它编码的文件极可能被误识为 UTF-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" 如遇Unicode值大于255的文本，不必等到空格再折行。
set formatoptions+=m
" 合并两行中文时，不在中间加空格：
set formatoptions+=B

"==========================================
"others
"==========================================

autocmd! bufwritepost _vimrc source % " vimrc文件修改之后自动加载。 windows。
autocmd! bufwritepost .vimrc source % " vimrc文件修改之后自动加载。 linux。


" 自动完成 
"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
"set completeopt+=longest
set completeopt=longest,menu
 
"离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
 
"回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
 
"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" 增强模式中的命令行自动完成操作
set wildmenu
" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*.class

" Python 文件的一般设置，比如不要 tab 等
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab
"自动补全配置
"Enable omni completion. (Ctrl-X Ctrl-O)
"autocmd FileType python set omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType css set omnifunc=csscomplete#CompleteCSS
"autocmd FileType java set omnifunc=javacomplete#Complete
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete


" Return to last edit position when opening files (You want this!)
" if has("")
""autocmd BufReadPost *
""     \ if line("'\"") > 0 && line("'\"") <= line("$") |
""     \   exe "normal! g`\"" |
""     \ endif

" if this not work ,make sure .viminfo is writable for you
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Remember info about open buffers on close"
set viminfo^=%
" A buffer becomes hidden when it is abandoned
"set hid

" For regular expressions turn magic on
set magic

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

"pydiction 1.2 python auto complete
let g:pydiction_location = '~/.vim/tools/pydiction/complete-dict'
"defalut g:pydiction_menu_height == 15
let g:pydiction_menu_height = 20 


"==========================================
"hot key
"==========================================

"强迫自己用 hjkl
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

"Treat long lines as break lines (useful when moving around in them)
"se swap之后，同物理行上线直接跳
map j gj
map k gk

"Smart way to move between windows 分屏窗口移动
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Remap VIM 0 to first non-blank character
map 0 ^

" Speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

""为方便复制，用<F2>开启/关闭行号显示:
nnoremap <F2> :set nonumber! number?<CR>
nnoremap <F3> :set list! list?<CR>
nnoremap <F4> :set wrap! wrap?<CR>
              "set paste
set pastetoggle=<F5>            " when in insert mode, press <F2> to go to
                                "    paste mode, where you can paste mass data
                                "    that won't be autoindented

nnoremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>


"==========================================
"use bundle to manage plugins
"plugin config begin
"==========================================

" 0-bundle the plugins
" vim plugin bundle
" :BundleInstall  install
" :BundleInstall! update
" ::BundleClean   remove plugin not in list
set nocompatible " be iMproved
filetype off " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" 使用Vundle来管理Vundle
Bundle 'gmarik/vundle'
Bundle 'tpope/vim-surround'
Bundle 'reinh/vim-makegreen'

" Git,  need git support
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-fugitive'
"目前未生效
Bundle 'msanders/snipmate.vim'
Bundle 'ervandew/supertab'
" ctrl + t   need ruby support
Bundle 'wincent/Command-T'
" nedd ack support, 替代grep,可以查询
Bundle 'mileszs/ack.vim'
" 编辑时，保留历史版本，可以回滚回历史
Bundle 'sjl/gundo.vim'
Bundle 'vim-scripts/TaskList.vim'

"导航相关
Bundle 'vim-scripts/The-NERD-tree'
  "命令模式下:b1 :b2在tab之间跳转
Bundle 'sontek/minibufexpl.vim'
Bundle 'majutsushi/tagbar'
Bundle 'vim-scripts/winmanager'
"状态栏增强
Bundle 'Lokaltog/vim-powerline'

" go to the definition
Bundle 'sontek/rope-vim'
" for python
 " need to install pep8
Bundle 'vim-scripts/pep8'
Bundle 'fs111/pydoc.vim'
 " test, 目前无法使用
Bundle 'alfredodeza/pytest.vim'
Bundle 'mitechie/pyflakes-pathogen'
Bundle 'vim-scripts/Pydiction'

" 自动匹配闭合 "'({
"不够强大
"Bundle 'vim-scripts/simple-pairs' 
"官方版有问题,需dos2nuix
"Bundle 'vim-scripts/ClosePairs' 
"使用他人修改版
Bundle 'jxiaoyu/closepairs'

"批量注释   ,+cc对选中多行进行注释    ,+c  解开注释  
Bundle 'scrooloose/nerdcommenter'


Bundle 'vim-scripts/grep.vim'


"Go"
Bundle 'jnwhiteh/vim-golang'
filetype plugin indent on

" 1-for taglist + ctag
"notice: install catgs
set tags=tags;/
let Tlist_Ctags_Cmd="/usr/bin/ctags" 
nnoremap <silent> <F8> :TlistToggle<CR>
" taglist
let Tlist_Auto_Highlight_Tag = 1 
let Tlist_Auto_Open = 0 
let Tlist_Auto_Update = 1 
let Tlist_Close_On_Select = 0 
let Tlist_Compact_Format = 0 
let Tlist_Display_Prototype = 0 
let Tlist_Display_Tag_Scope = 1 
let Tlist_Enable_Fold_Column = 0 
let Tlist_Exit_OnlyWindow = 1 
let Tlist_File_Fold_Auto_Close = 0 
let Tlist_GainFocus_On_ToggleOpen = 1 
let Tlist_Hightlight_Tag_On_BufEnter = 1 
let Tlist_Inc_Winwidth = 0 
let Tlist_Max_Submenu_Items = 1 
let Tlist_Max_Tag_Length = 30
let Tlist_Process_File_Always = 0 
let Tlist_Show_Menu = 0 
let Tlist_Show_One_File = 1 
let Tlist_Sort_Type = "order"
let Tlist_Use_Horiz_Window = 0 
let Tlist_Use_Right_Window = 1 
let Tlist_WinWidth = 25  
"let tlist_php_settings = 'php;c:class;i:interfaces;d:constant;f:function'


let mapleader = ','
let g:mapleader = ','

" 2-tasklist
map <leader>td <Plug>TaskList

" 3-pep8  default F<F5>,  检查pep8
let g:pep8_map='<leader>8'


" 4-auto completion  ctrl+p to match
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menuone,longest,preview

" 5-pyflakes    close the window for quick fix, 否则pep8 和pyflakes冲突
let g:pyflakes_use_quickfix = 0
" 如有需要，可设置忽略部分错误
let g:flake8_ignore="E501""

" 6-gundo revision history, reverse to old version,仅在编辑时有效，保存后进入无效
map <leader>h :GundoToggle<CR>

" 7-file browser.    , + n open the browser window.   :b1  :b2 jump between tabs
map <leader>n :NERDTreeToggle<CR>

" 8-Rope refactoring and go to the definition
   " ,+a  选0 ,之后建立project,可使用,j ,r进行操作
imap <leader><r> <M-/>
let ropevim_vim_completion=1
let ropevim_extended_complete=1
   ",+j 跳转到定义处
map <leader>j :RopeGotoDefinition<CR>
   ",+r 变量/函数重命名
map <leader>r :RopeRename<CR>
   "查看docs
map <leader>d :RopeShowDoc<CR>

" 9-searching ,目前还未用
map <leader>a <ESC>:Ack!


" 10-py.test
" Execute the tests
nmap <silent><Leader>tf <Esc>:Pytest file<CR>
nmap <silent><Leader>tc <Esc>:Pytest class<CR>
nmap <silent><Leader>tm <Esc>:Pytest method<CR>
" cycle through test errors
nmap <silent><Leader>tn <Esc>:Pytest next<CR>
nmap <silent><Leader>tp <Esc>:Pytest previous<CR>
nmap <silent><Leader>te <Esc>:Pytest error<CR>


nmap <F9> :TagbarToggle<CR>
"" 11-pydiction , python自动补全
filetype plugin on
let g:pydiction_location='~/.vim/bundle/Pydiction/complete-dict'
let g:pydiction_menu_height = 20
let python_highlight_all=1

" 12-powerline  状态栏增强
"powerline{ 
set guifont=PowerlineSymbols\ for\ Powerline 
set nocompatible 
set t_Co=256 
""let g:Powerline_symbols = 'fancy' 
"if want to use fancy,need to add font patch 
"git clone git://gist.github.com/1630581.git ~/.fonts/ttf-dejavu-powerline
let g:Powerline_symbols = 'unicode'
""let g:Powerline_colorscheme = 'skwp'
"}


"13-grep
nnoremap <silent> <F7> :Grep<CR>

"14-winmanager
let g:winManagerWindowLayout='FileExplorer|TagList'
map <c-w><c-f> :FirstExplorerWindow<cr> 
map <c-w><c-b> :BottomExplorerWindow<cr> 
map <c-w><c-t> :WMToggle<cr>

"15-minibuf
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

"16-snipmate   Tab键和pydiction冲突
ino <c-j> <c-r>=TriggerSnippet()<cr>
snor <c-j> <esc>i<right><c-r>=TriggerSnippet()<cr>

"17-go
set rtp+=$GOROOT/misc/vim
filetype plugin indent on
syntax on

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
"map <c-space> ?"


" Close the current buffer
map <leader>bd :Bclose<cr>
" " Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
"nmap <M-j> mz:m+<cr>`z
"nmap <M-k> mz:m-2<cr>`z
"vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
"vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z"

" git
"%{fugitive#statusline()}
" easy file saving
"map <C-s> :w<CR>

"括号匹配 目前不生效
"vnoremap $1 <esc>`>a)<esc>`<i(<esc>
"vnoremap $2 <esc>`>a]<esc>`<i[<esc>
"vnoremap $3 <esc>`>a}<esc>`<i{<esc>
"vnoremap $$ <esc>`>a"<esc>`<i"<esc>
"vnoremap $q <esc>`>a'<esc>`<i'<esc>
"vnoremap $e <esc>`>a"<esc>`<i"<esc>
""非常好用的括号匹配，实际是自动生成括号
"实现便利和兼容的折中
"inoremap $1 ()<esc>i
"inoremap $2 []<esc>i
"inoremap $3 {}<esc>i
"inoremap $4 {<esc>o}<esc>O
"inoremap $q ''<esc>i
"inoremap $e ""<esc>i
"inoremap $t <><esc>i

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
"nmap <M-j> mz:m+<cr>`z
"nmap <M-k> mz:m-2<cr>`z
"vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
"vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
"
"useful mapping for managing tabs
"map <leader>tn :tabnew<cr>
"map <leader>to :tabonly<cr>
"map <leader>tc :tabclose<cr>
"map <leader>tm :tabmove

"不知道有没有用的.....><

"Don't redraw while executing macros(Good performace config)
set lazyredraw
""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>"

"删除多余空格
" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

