"==========================================
" Author:  wklken
" Version: 5
" Email: wklken@yeah.net
" BlogPost: http://blog.csdn.net/wklken/article/details/8044678
" ReadMe: README.md
" Last_modify: 2012-12-16
" Sections:
"     ->General
"     ->Vim User Interface
"     ->Colors and Fonts
"     ->Files and Backups
"     ->Text, tab and indent related
"     ->Visual mode related
"     ->Status line
"     ->Editing mapping
"     ->Plugins
"     ->Plugin configs
"     ->Others
"参考:http://amix.dk/vim/vimrc.html
"==========================================

"==========================================
"General
"==========================================

"set guifont=Monaco:h20          " 字体 && 字号  
"配色方案
"
"==========================================
"colors and fonts
"==========================================
"开启语法高亮
syntax enable
syntax on

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

set t_Co=256
set background=dark

" color theme solarized config
"let g:solarized_termcolors=256
"colorscheme solarized

"同sublime text2
colorscheme molokai
let g:molokai_original = 0

"colorscheme desert 

" history存储长度。
set history=2000       

"检测文件类型
filetype on
"针对不同的文件类型采用不同的缩进格式  
filetype indent on               
"允许插件  
filetype plugin on
"启动自动补全
filetype plugin indent on

"非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible      
set autoread          " 文件修改之后自动载入。
set shortmess=atI       " 启动的时候不显示那个援助索马里儿童的提示

" 备份,到另一个位置. 防止误删吧
set backup
set backupext=.bak
set backupdir=~/bak/vimbk/

" 取消备份。 视情况自己改
set nobackup
set noswapfile

" 突出显示当前行等
set cursorcolumn
set cursorline              " 突出显示当前行

"设置 退出vim后，内容显示在终端屏幕
"好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=

"- 则点击光标不会换,用于复制
set mouse-=a           " 鼠标暂不启用
set selection=exclusive  
set selectmode=mouse,key

" No annoying sound on errors
" 去掉输入错误的提示声音
set title                " change the terminal's title
set novisualbell           " don't beep
set noerrorbells         " don't beep
set t_vb=
set tm=500

"==========================================
" show and format
"==========================================
"显示行号：
set number
set nowrap                    " 取消换行。

"括号配对情况
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

"设置文内智能搜索提示
" 高亮search命中的文本。
set hlsearch          
" 搜索时忽略大小写
set ignorecase
" 随着键入即时搜索
set incsearch
" 有一个或以上大写字母时仍大小写敏感
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise

" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
set foldmethod=indent
set foldlevel=99
" 在左侧显示折叠的层次
"set foldcolumn=4
"
"Smart indent

set smartindent
set autoindent    " always set autoindenting on
" never add copyindent, case error   " copy the previous indentation on autoindenting

set tabstop=4                " 设置Tab键的宽度        [等同的空格个数]
set shiftwidth=4  " number of spaces to use for autoindenting
set softtabstop=4             " 按退格键时可以一次删掉 4 个空格
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格

set expandtab                " 将Tab自动转化成空格    [需要输入真正的Tab键时，使用 Ctrl+V + Tab]

set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'



set encoding=utf-8
set showcmd
" A buffer becomes hidden when it is abandoned
set hidden
set wildmode=list:longest
set ttyfast

"行号变成相对，可以用 nj  nk   进行跳转 5j   5k 上下跳5行
set relativenumber
au FocusLost * :set number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc
nnoremap <C-n> :call NumberToggle()<cr>

"create undo file
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo
set undodir=~/bak/vimundo//
set undofile

set wildignore=*.swp,*.bak,*.pyc,*.class

"==========================================
" status
"==========================================
"显示当前的行号列号：
set ruler
""在状态栏显示正在输入的命令
set showcmd
" Show current mode
set showmode  

" Set 7 lines to the cursor - when moving vertically using j/k 上下滚动,始终在中间
set scrolloff=7


"set winwidth=79

" 命令行（在状态行下）的高度，默认为1，这里是2
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" Always show the status line
set laststatus=2



"==========================================
" file encode
"==========================================
" 设置新文件的编码为 UTF-8
set encoding=utf-8                                  
set fileencodings=ucs-bom,utf-8,gb2312,big5,latin1
set helplang=cn
"set enc=2byte-gb18030

" 自动判断编码时，依次尝试以下编码：
" gb18030 最好在 UTF-8 前面，否则其它编码的文件极可能被误识为 UTF-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" 如遇Unicode值大于255的文本，不必等到空格再折行。
set formatoptions+=m
" 合并两行中文时，不在中间加空格：
set formatoptions+=B

"==========================================
"others
"==========================================
autocmd! bufwritepost _vimrc source % " vimrc文件修改之后自动加载。 windows。
autocmd! bufwritepost .vimrc source % " vimrc文件修改之后自动加载。 linux。


" 自动补全配置
"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
"set completeopt+=longest
set completeopt=longest,menu
 
"离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
 
"回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
 
"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" 增强模式中的命令行自动完成操作
set wildmenu
" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*.class

" Python 文件的一般设置，比如不要 tab 等
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab ai


"自动补全配置
"Enable omni completion. (Ctrl-X Ctrl-O)
"autocmd FileType python set omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType css set omnifunc=csscomplete#CompleteCSS
"autocmd FileType java set omnifunc=javacomplete#Complete
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

" if this not work ,make sure .viminfo is writable for you
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"删除多余空格
" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline

" Remember info about open buffers on close"
set viminfo^=%

" For regular expressions turn magic on
set magic

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

"==========================================
"hot key  自定义快捷键
"==========================================
let mapleader = ','
let g:mapleader = ','

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

"强迫自己用 hjkl
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

"Treat long lines as break lines (useful when moving around in them)
"se swap之后，同物理行上线直接跳
map j gj
map k gk

" better command line editing
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

"Smart way to move between windows 分屏窗口移动
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Go to home and end using capitalized directions
noremap H ^
noremap L $

" Remap VIM 0 to first non-blank character
map 0 ^

" Speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

""为方便复制，用<F2>开启/关闭行号显示:
nnoremap <F2> :set nonumber! number?<CR>
nnoremap <F3> :set list! list?<CR>
nnoremap <F4> :set wrap! wrap?<CR>
              "set paste
set pastetoggle=<F5>            " when in insert mode, press <F2> to go to
                                "    paste mode, where you can paste mass data
                                "    that won't be autoindented

" disbale paste mode when leaving insert mode                                
au InsertLeave * set nopaste

nnoremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>


" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
"map <c-space> ?"

map Y y$
cmap w!! %!sudo tee > /dev/null %
noremap <silent><leader>/ :nohls<CR>

inoremap kj <Esc>
" I can type :help on my own, thanks.
noremap <F1> <Esc>"

nnoremap ; :

nnoremap <leader>v V`}

"Use sane regexes"
nnoremap / /\v
vnoremap / /\v

"Keep search pattern at the center of the screen."
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

"Use arrow key to change buffer"
noremap <left> :bp<CR>
noremap <right> :bn<CR>

""Jump to start and end of line using the home row keys
""
nmap t o<ESC>k
nmap T O<ESC>j

" ctrl +jk to move lines
noremap <C-j> :m+<CR>
noremap <C-k> :m-2<CR>
inoremap <C-j> <Esc>:m+<CR>
inoremap <C-k> <Esc>:m-2<CR>

"
" remap U to <C-r> for easier redo
nnoremap U <C-r>

"au VimResized * exe "normal! \<c-w>=""

" select all
map <Leader>a ggVG"

" automatically reload vimrc when it's saved
au BufWritePost .vimrc so ~/.vimrc'"

" Close the current buffer
map <leader>bd :Bclose<cr>
" " Close all the buffers
map <leader>ba :1,1000 bd!<cr>

map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

"==========================================
"use bundle to manage plugins
"plugin config begin
"==========================================

" 0-bundle the plugins
" vim plugin bundle
" :BundleInstall  install
" :BundleInstall! update
" ::BundleClean   remove plugin not in list

"package dependent:  pep8

filetype off " required! turn off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"D 使用Vundle来管理Vundle
Bundle 'gmarik/vundle'
"D 代码片段
Bundle 'vim-scripts/UltiSnips'
"D 状态栏增强
Bundle 'Lokaltog/vim-powerline'
"D 括号显示增强
Bundle 'kien/rainbow_parentheses.vim'
"D 更高效的移动  W/fx
Bundle 'Lokaltog/vim-easymotion'

"D for golang
Bundle 'jnwhiteh/vim-golang'

"D file browser
Bundle 'vim-scripts/The-NERD-tree'

"D tag browser
Bundle 'majutsushi/tagbar'

"D super tab
Bundle 'ervandew/supertab'

"D task list
Bundle 'vim-scripts/TaskList.vim'

"D edit history   同类Undotree
Bundle 'sjl/gundo.vim'

"D nerdcommenter
Bundle 'scrooloose/nerdcommenter'

"D surround
Bundle 'tpope/vim-surround'

"D for git 尚未用起来
Bundle 'tpope/vim-fugitive'

"D for python check
Bundle 'mitechie/pyflakes-pathogen'
Bundle 'vim-scripts/pep8'

"D 自动补全单引号，双引号等 Bundle 'underlog/ClosePairs'
Bundle 'Raimondi/delimitMate'

"for markdown
Bundle 'plasticboy/vim-markdown'

"for python auto complete
Bundle 'davidhalter/jedi-vim'
"考虑   python-mode
" too slow.....
"Bundle 'klen/python-mode'

"for mru, recently opened files
Bundle 'vim-scripts/mru.vim'

"for nginx conf file highlight.   need to confirm it works
Bundle 'thiderman/nginx-vim-syntax'

"for copy/paste enhance
Bundle 'vim-scripts/YankRing.vim'

"for repeat -> enhance surround.vim
Bundle 'tpope/vim-repeat'

"for file search ctrlp
Bundle 'kien/ctrlp.vim'


"for js
Bundle 'pangloss/vim-javascript'

"(Vit)ality is a plugin that makes (V)im play nicely with (i)Term 2 and (t)mux
"?? leave or not?
Bundle 'sjl/vitality.vim'

" end turn on
filetype plugin indent on

"========================== config for plugins begin ======================================

" 1 Ultisnips
"ultisnips  https://github.com/graudeejs/dot.vim/tree/master/snippets
"http://www.ruchee.com/code/linux/vim/snippets/python.snippets.shtml
"https://github.com/honza/snipmate-snippets/blob/master/snippets/python.snippets
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
"定义存放代码片段的文件夹 .vim下，使用自定义和默认的，将会的到全局，有冲突的会提示
let g:UltiSnipsSnippetDirectories=["snippets", "bundle/UltiSnips/UltiSnips"]

" 2-powerline  状态栏增强
"if want to use fancy,need to add font patch -> git clone git://gist.github.com/1630581.git ~/.fonts/ttf-dejavu-powerline
"let g:Powerline_symbols = 'fancy' 
let g:Powerline_symbols = 'unicode'

" 3 -rainbow_parentheses
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" 4 - the nerdtree 
map <leader>n :NERDTreeToggle<CR>

" 5 - tagbar
nmap <F9> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" 6 - supertab
let g:SuperTabDefaultCompletionType = "context"

" 7 - tasklist
map <leader>td <Plug>TaskList

" 8 - gundo
set rtp+=$GOROOT/misc/vim
map <leader>h :GundoToggle<CR>

" 9 - pyflakes
let g:pyflakes_use_quickfix = 0

" 10 -pep8 check
let g:pep8_map='<leader>8'


"" 11 -for taglist + ctag
""notice: install catgs
set tags=tags;/
let Tlist_Ctags_Cmd="/usr/bin/ctags" 
nnoremap <silent> <F8> :TlistToggle<CR>
" taglist
let Tlist_Auto_Highlight_Tag = 1 
let Tlist_Auto_Open = 0 
let Tlist_Auto_Update = 1 
let Tlist_Close_On_Select = 0 
let Tlist_Compact_Format = 0 
let Tlist_Display_Prototype = 0 
let Tlist_Display_Tag_Scope = 1 
let Tlist_Enable_Fold_Column = 0 
let Tlist_Exit_OnlyWindow = 1 
let Tlist_File_Fold_Auto_Close = 0 
let Tlist_GainFocus_On_ToggleOpen = 1 
let Tlist_Hightlight_Tag_On_BufEnter = 1 
let Tlist_Inc_Winwidth = 0 
let Tlist_Max_Submenu_Items = 1 
let Tlist_Max_Tag_Length = 30
let Tlist_Process_File_Always = 0 
let Tlist_Show_Menu = 0 
let Tlist_Show_One_File = 1 
let Tlist_Sort_Type = "order"
let Tlist_Use_Horiz_Window = 0 
let Tlist_Use_Right_Window = 1 
let Tlist_WinWidth = 25  

" 13 - jedi
let g:jedi#auto_vim_configuration = 0
let g:jedi#get_definition_command = "<leader>d"
let g:jedi#goto_command = "<leader>g"
let g:jedi#rename_command = "<leader>r"
let g:jedi#related_names_command = ""  "n
let g:jedi#pydoc = "K"
let g:jedi#autocompletion_command = "<C-p>"
let g:jedi#popup_on_dot = 0
let g:jedi#show_function_definition = 0
""let g:jedi#use_tabs_not_buffers = 0

" 14 - mru
map <leader>f :MRU<CR>
let MRU_Max_Menu_Entries = 20
let MRU_Use_Current_Window = 0
let MRU_Max_Entries = 100

" 15 - yankring
let g:yankring_replace_n_nkey = ''
let g:yankring_history_dir = '~/bak/'
map <leader>y :YRShow<cr>
map <leader>yc :YRClear<CR>

" 16 - ctrlp
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
"set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|.rvm$'
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

" for python.vim syntax highlight
let python_highlight_all = 1

" 17 - javascript
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

"""""""""""""""""
"  define func  "
"""""""""""""""""

"""""""""""""""""
"  for mac vim  "
"""""""""""""""""
if version >= 730 && has("macunix")
	  " Default yank and paste go to Mac's clipboard
	  set clipboard=unnamed
end

