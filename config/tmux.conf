# reference -> https://github.com/square/maximum-awesome
# brew install reattach-to-user-namespace
# 有需要可以配 https://github.com/erikw/tmux-powerline
# C-a + ? 显示所有绑定


#--------------------------- base config begin -------------------------------

# 进入控制台模式
# use C-a, since it's on the home row and easier to hit than C-b
set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix
set -g base-index 1

# vi is good  vi风格
setw -g mode-keys vi

# mouse behavior
setw -g mode-mouse on
set -g mouse-select-pane on
set -g mouse-resize-pane on

set-option -g default-terminal screen-256color

bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# use vim-like keys for splits and windows
bind-key v split-window -h
bind-key s split-window -v
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
bind C-l send-keys 'C-l'

bind-key C-o rotate-window

bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window

# [ 进入复制，space键开始选择问题  方向键移动，  回车复制  ] 黏贴
# 复制会被放入缓冲区，  # 查看
bind-key [ copy-mode
bind-key ] paste-buffer


# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

set-window-option display-panes-time 1500

# Status Bar
set-option -g status-interval 1
set-option -g status-left ''
set-option -g status-right '%l:%M%p'
set-window-option -g window-status-current-fg magenta
set-option -g status-fg default

# Status Bar solarized-dark (default)
set-option -g status-bg black
set-option -g pane-active-border-fg black
set-option -g pane-border-fg black

# Status Bar solarized-light
if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g status-bg white"
if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-active-border-fg white"
if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-border-fg white"

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# Enable native Mac OS X copy/paste  对于mac用户，可以复制到系统剪贴板
set-option -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

#--------------------------- base config end -------------------------------

#-----------------
#1. 整理一份快捷键列表，查看当前被修改的键
#2. 配置自己喜欢的键
#3. 熟练应用
#4. 脚本化，更高级的东西

######## short-cut explain ########
#http://wiki.wutianqi.com/software/tmux.html
#https://linuxtoy.org/archives/from-screen-to-tmux.html
#http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/
#http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2/
#http://mingxinglai.com/cn/2012/09/tmux/
#https://wiki.freebsdchina.org/software/t/tmux
#
# 下面写的是通用的，但是有一部分被改写了

# 完全可以在不同的terminal切换打开
#
# 一个session - 多个窗口
# 一个窗口 - 多个pane


# session

# d deattch当前session
# 输入  tmux attach [-t sessionname] 重新进入
# tmux attach-session -t 数字 #选择tmux
# tmux ls 列出所有window
# $  重命名当前session
# c-z 挂起当前seesion


# windows
#
# c 建立一个新的
# b 重命名当前window
# & 关闭当前窗口
# n 进入下一个window
# p 前一个
# l 切换到上一个  最后一个使用的
# w 列出所有窗口编号,直接上下键选择开启
# 编号  移动到指定窗口
# . 修改窗口编号，相当于排序
# f 搜索所有窗口


# pane操作
# " 横向分割
# % 纵向
# 方向键 在pane之间移动
# o 到下一个pane
# opt + 方向键  调整pane大小
# { / } 左右pane交换
# 空格  横竖切换
# q 显示pane编号
# x 关闭当前pane


#--------待补充整理


#C-b o 在小窗口中切换
#C-b ! 关闭所有小窗口? 吧当前窗口变为新窗口
#C-b pageup/pagedow"
#C-b s 以菜单方式显示和选择会话
#C-b w 以菜单方式显示和选择窗口
#C-b C-方向键 调整分隔窗口大小
#C-b 空格  采用下一个内置布局
#C-b C-o 调换窗口位置
#C-b ? 显示快捷键帮助 , q退出
#C-b q // 显示分隔窗口的编号


#------------ 改配置

## split windows like vim.  - Note: vim's definition of a horizontal/vertical split is reversed from tmux's
#unbind '"'
#unbind %
#unbind s
#bind s split-window -v
#bind S split-window -v -l 40
#bind v split-window -h
#bind V split-window -h -l 120

## navigate panes with hjkl
#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R

## resize panes like vim
#bind < resize-pane -L 10
#bind L resize-pane -L 100
#bind > resize-pane -R 10
#bind R resize-pane -R 100
#bind - resize-pane -D 5
#bind D resize-pane -D 36
#bind + resize-pane -U 5
#bind U resize-pane -U 35

## swap panes
#bind ^u swapp -U
#bind ^d swapp -D

#------------------ 一种选择
# Copy and paste like in vim
#unbind [
#bind Escape copy-mode
#unbind p
#bind p paste-buffer
#bind -t vi-copy 'v' begin-selection
#bind -t vi-copy 'y' copy-selection#
#------------------

